# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14CvVXOYdPom4_Hbx_5cFKrrA-Or4neNk
"""

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from PIL import Image

# Data
images = ['lava1.jpg', 'lava2.jpg', 'lava3.jpg', 'lava4.jpg', 'lava5.jpg',
 'lava6.jpg', 'lava7.jpg', 'lava8.jpg', 'lava9.jpg', 'lava10.jpg',
 'ocean1.jpg', 'ocean2.jpg', 'ocean3.jpg', 'ocean4.jpg', 'ocean5.jpg',
 'ocean6.jpg', 'ocean7.jpg', 'ocean8.jpg', 'ocean9.jpg', 'ocean10.jpg']


lava_red = []
lava_blue = []
ocean_red = []
ocean_blue = []


for image in images[:10]:
    img = mpimg.imread(image)
    RGBtuple = np.array(img).mean(axis=(0,1))
    averageRed = RGBtuple[0]
    averageGreen = RGBtuple[1]
    averageBlue = RGBtuple[2]
    sumColor = averageRed+averageGreen+averageBlue
    percent_red = averageGreen/sumColor
    percent_blue = averageBlue/sumColor
    lava_red.append(percent_red)
    lava_blue.append(percent_blue)
for image in images[10:]:
    img = mpimg.imread(image)
    RGBtuple = np.array(img).mean(axis=(0,1))
    averageRed = RGBtuple[0]
    averageGreen = RGBtuple[1]
    averageBlue = RGBtuple[2]
    sumColor = averageRed+averageGreen+averageBlue
    percent_red = averageGreen/sumColor
    percent_blue = averageBlue/sumColor
    ocean_red.append(percent_red)
    ocean_blue.append(percent_blue)
    
#Data Visualization
plt.scatter(lava_red, lava_blue, s=100, facecolors ='red', edgecolors='black', alpha=0.5)
plt.scatter(ocean_red, ocean_blue, s=100, facecolors ='blue', edgecolors='black', alpha=0.5)
plt.xlabel('Percentage of Red')
plt.ylabel('Percentage of Blue')
plt.title('Lava and Ocean training images')
plt.legend(['Lava','Ocean'])
plt.show()

# Questions 3 and 4

training_target = ['lava', 'lava', 'lava', 'lava',
 'lava', 'lava', 'lava', 'lava',
 'lava', 'lava', 'ocean', 'ocean',
 'ocean', 'ocean', 'ocean', 'ocean',
 'ocean', 'ocean', 'ocean', 'ocean']

training_data = np.zeros((20,2))
for i in range(10):
    training_data[i,0] = lava_red[i]
    training_data[10+i,0] = ocean_red[i]
    training_data[i,1] = lava_blue[i]
    training_data[10+i,1] = ocean_blue[i]
    
    
for i in training_data:
    print(i)
    
from sklearn import neighbors
k1 = neighbors.KNeighborsClassifier(1,weights='distance')
k1.fit(training_data,training_target)

test = ['test1.jpg','test2.jpg']
test_red = []
test_blue = []
for image in test:
    img = mpimg.imread(image)
    RGBtuple = np.array(img).mean(axis=(0,1))
    averageRed = RGBtuple[0]
    averageGreen = RGBtuple[1]
    averageBlue = RGBtuple[2]
    sumColor = averageRed+averageGreen+averageBlue
    percent_red = averageRed/sumColor
    percent_blue = averageBlue/sumColor
    test_red.append(percent_red)
    test_blue.append(percent_blue)

 
test_data = np.zeros((2,2))
for i in range(2):
    test_data[i,0] = test_red[i]
    test_data[i,1] = test_blue[i]
for i in test_data:
    print(i)   

k1_pred = k1.predict(test_data)
print(k1_pred)

######## 
# Since in real life, lava pictures will have lots of red color and ocean pictures have lots of blue color, 
# I understand how Python uses that fact as a basis to build the model. test1 is a picture of the ocean and the classifier 
# labels it as ocean. It works with test2 also because test2 is a picture of lava and the classifier labels it as lava.
# The pictures with higher degrees in blue are labeled as ocean and the pictures with higher degrees in red are labeled as lava
# This aligns logically with the plot that puts the Y axis with higher levels of blue as ocean and the X axis with higher 
# levels of red as lava.